# Time series data
data('AirPassengers')
AP <- AirPassengers
str(AP)
head(AP)
ts(AP, frequency = 12, start = c(1949,1))
attributes(AP)
plot(AP)
# Log transform
AP <- log(AP)
plot(AP)
# decomposition of additive time series
decomp <- decompose(AP)
decomp$figure
plot(decomp$figure,
type = 'b',
xlab = 'Month',
ylab = 'Sesaonality Index',
col = 'blue',
las = 2)
plot(decomp)
# ARIMA
library(forecast)
a <- 2
# Time series data
data('AirPassengers')
AP <- AirPassengers
str(AP)
head(AP)
ts(AP, frequency = 12, start = c(1949,1))
attributes(AP)
plot(AP)
# Log transform
AP <- log(AP)
plot(AP)
# decomposition of additive time series
decomp <- decompose(AP)
decomp$figure
plot(decomp$figure,
type = 'b',
xlab = 'Month',
ylab = 'Sesaonality Index',
col = 'blue',
las = 2)
plot(decomp)
# ARIMA
library(forecast)
install.packages("forecast")
install.packages("TTR")
install.packages("curl")
install.packages("forecast")
# Time series data
data('AirPassengers')
AP <- AirPassengers
str(AP)
head(AP)
ts(AP, frequency = 12, start = c(1949,1))
attributes(AP)
plot(AP)
# Log transform
AP <- log(AP)
plot(AP)
# decomposition of additive time series
decomp <- decompose(AP)
decomp$figure
plot(decomp$figure,
type = 'b',
xlab = 'Month',
ylab = 'Sesaonality Index',
col = 'blue',
las = 2)
plot(decomp)
# ARIMA
library(forecast)
model <- auto.arima(AP)
attributes(model)
# ACF and PACF plots
acf(model$residuals, main = 'Correlogram')
pacf(model$residuals, main = 'Partial Correlogram')
# Ljung-Box test
Box.test(model$residuals, lag = 20, type = 'Ljung-Box')
# Residual plot
hist(model$residuals,
col = 'red',
xlab = 'Error',
main = 'Histogram of residuals',
freq = FALSE)
lines(density(model$residuals))
# Forecast
f <- forecast(model, 48)
library(ggplot2)
autoplot(f)
accuracy(f)
data <- read.csv(file.choose(), header = FALSE, sep = '')
str(data)
plot(data[60,])
plot(data[,60])
plot(data[,60], type = 'l')
j <- c(5, 105, 205, 305, 405, 305)
j <- c(5, 105, 205, 305, 405, 305)
sample <- t(data[j,])
plot.ts(sample())
plot.ts(sample
plot.ts(sample
)
plot.ts(sample)
plot.ts(sample,
main = 'Time-series plot',
col = 'blue',
type = 'b')
# Data preparation
n <- 10
s <- sample(1:100, 10)
i <- c(s)
str(i)
str(s)
i == s
d <- data[i, ]
d
# Calculate distances
library(dtw)
install.packages("dtw")
pattern <- c(rep('Normal', n),
rep('Cyclic', n),
rep('Increasing Trend', n),
rep('Decreasing Trend', n),
rep('Upward Shift', n),
rep('Downward Shift', n)
)
plot.ts(sample,
main = 'Time-series plot',
col = 'blue',
type = 'b')
plot(hc)
# Hierarchical Clustering
hc <- hclust(distance, method = 'average')
distance <- dist(d, method = 'DTW')
# Hierarchical Clustering
hc <- hclust(distance, method = 'average')
# Calculate distances
library(dtw)
distance <- dist(d, method = 'DTW')
# Hierarchical Clustering
hc <- hclust(distance, method = 'average')
plot(hc)
plot(hc,
labels = pattern,
cex = 0.5)
plot(hc,
labels = pattern,
cex = 0.5)
plot(hc,
labels = pattern,
cex = 0.5,
hang = -1)
# Hierarchical Clustering
hc <- hclust(distance, method = 'average')
plot(hc,
labels = pattern,
cex = 0.5,
hang = -1)
plot(hc,
labels = pattern,
cex = 0.5,
hang = -1,
col = 'blue'
)
rect.hclust(hc, k=4)
# Hierarchical Clustering
hc <- hclust(distance, method = 'average')
plot(hc,
labels = pattern,
cex = 0.5,
hang = -1,
col = 'blue'
)
pattern <- c(rep('Normal', n),
rep('Cyclic', n),
rep('Increasing Trend', n),
rep('Decreasing Trend', n),
rep('Upward Shift', n),
rep('Downward Shift', n)
)
# Calculate distances
library(dtw)
distance <- dist(d, method = 'DTW')
# Hierarchical Clustering
hc <- hclust(distance, method = 'average')
plot(hc,
labels = pattern,
cex = 0.5,
hang = -1,
col = 'blue'
)
# Time series data
data('AirPassengers')
AP <- AirPassengers
str(AP)
head(AP)
ts(AP, frequency = 12, start = c(1949,1))
attributes(AP)
plot(AP)
# Log transform
AP <- log(AP)
plot(AP)
# decomposition of additive time series
decomp <- decompose(AP)
decomp$figure
plot(decomp$figure,
type = 'b',
xlab = 'Month',
ylab = 'Sesaonality Index',
col = 'blue',
las = 2)
plot(decomp)
# ARIMA
library(forecast)
model <- auto.arima(AP)
attributes(model)
# ACF and PACF plots
acf(model$residuals, main = 'Correlogram')
pacf(model$residuals, main = 'Partial Correlogram')
# Ljung-Box test
Box.test(model$residuals, lag = 20, type = 'Ljung-Box')
# Residual plot
hist(model$residuals,
col = 'red',
xlab = 'Error',
main = 'Histogram of residuals',
freq = FALSE)
lines(density(model$residuals))
# Forecast
f <- forecast(model, 48)
library(ggplot2)
autoplot(f)
accuracy(f)
##############################################
# Time series clustering
##############################################
# Data
# http://kdd.ics.uci.edu/databases/synthetic_control/synthetic_control.html
data <- read.csv(file.choose(), header = FALSE, sep = '')
str(data)
plot(data[,60], type = 'l')
j <- c(5, 105, 205, 305, 405, 305)
sample <- t(data[j,])
plot.ts(sample,
main = 'Time-series plot',
col = 'blue',
type = 'b')
# Data preparation
n <- 10
s <- sample(1:100, 10)
i <- c(s, 100+s, 200+s, 300+s, 400+s, 500+s)
d <- data[i, ]
pattern <- c(rep('Normal', n),
rep('Cyclic', n),
rep('Increasing Trend', n),
rep('Decreasing Trend', n),
rep('Upward Shift', n),
rep('Downward Shift', n)
)
# Calculate distances
library(dtw)
distance <- dist(d, method = 'DTW')
# Hierarchical Clustering
hc <- hclust(distance, method = 'average')
plot(hc,
labels = pattern,
cex = 0.5,
hang = -1,
col = 'blue'
)
rect.hclust(hc, k=4)
rect.hclust(hc, k=8)
plot(hc,
labels = pattern,
cex = 0.5,
hang = -1,
col = 'blue'
)
rect.hclust(hc, k=8)
rect.hclust(hc, k=2)
